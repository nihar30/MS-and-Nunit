name: NETPipeline


env:
  VERSION: '3.1'
  SOLUTION_FILE_PATH: .
  #BUILD_CONFIGURATION: Release
  CONTINUE_ON_ERROR_SETUP: true
  CONTINUE_ON_ERROR: false

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-latest
    name: MS Build

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Setup .NET Core SDK ${{ env.VERSION }}
      uses: actions/setup-dotnet@v1.7.2
      continue-on-error: ${{ env.CONTINUE_ON_ERROR_SETUP }}
      with:
        dotnet-version: ${{ env.VERSION }}
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
      continue-on-error: ${{ env.CONTINUE_ON_ERROR_SETUP }}
      
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}


    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        
    - name: Start analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:".NetProject" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.dotcover.reportsPaths="./CodeCoverageReport.xml"
            

    - name: MS Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      run: msbuild /m /t:Rebuild ${{env.SOLUTION_FILE_PATH}}
      continue-on-error: ${{ env.CONTINUE_ON_ERROR }}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
          # Artifact name
        name: artifact 
        path: $GITHUB_WORKSPACE

    - name: NUnit
      run: dotnet new nunit
      
    - name: add package Microsoft.NET.Test.Sdk
      run: dotnet add unit-testing-using-nunit.csproj package Microsoft.NET.Test.Sdk --version 16.10.0 
      
    - name: add package Nunit3TestAdapter
      run: dotnet add unit-testing-using-nunit.csproj package Nunit3TestAdapter
      
    - name: add package NUnit
      run: dotnet add unit-testing-using-nunit.csproj package NUnit
        
    - name: add test logger package 
      run: dotnet add unit-testing-using-nunit.csproj package NunitXml.TestLogger --version 3.0.107
      
    - name: add package NUnit
      run: dotnet add unit-testing-using-nunit.csproj package TeamCity.dotcover
      
    - name: Nunit Test
      run: dotnet test unit-testing-using-nunit.sln --logger:"trx;LogFileName=testresult.xml"
        
    - name: Upload a Test Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        # Artifact name
        name: artifact 
        path: D:\a\MS-and-Nunit\MS-and-Nunit\PrimeService.Tests\TestResults\testresult.xml
 
  Code-Quality-Check:
    needs: build
    name: Dotcover 
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
      
      - name: dotnet cover  
        uses: dodopizza/dotcover-action@v1
        with:
         #dotCoverCommand: help cover coverage.xml
         dotCoverCommand: dotnet --output=./CodeCoverageReport.xml --reportType=XML -- test "./unit-testing-using-nunit.csproj"

      - name: 'Publish code coverage results'
        uses: actions/upload-artifact@v2.2.3
        with:
          name: CoverageReport
          path: ./CodeCoverageReport.xml      


  Sonar-End-Analysis:
    needs: Code-Quality-Check
    name: Sonar Analysis
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2     
      - name: End Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt  
